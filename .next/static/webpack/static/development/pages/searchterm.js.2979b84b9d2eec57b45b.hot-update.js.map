{"version":3,"file":"static/webpack/static/development/pages/searchterm.js.2979b84b9d2eec57b45b.hot-update.js","sources":["webpack:///./components/MainDiv.js"],"sourcesContent":["import React from \"react\";\nimport { getTweets, sortTimes } from \"../functions/fetchFunctions\";\nimport TableCells from \"./TableCells\";\nimport \"../mainDiv.css\";\n\nconst fetch = require(\"node-fetch\");\nconst dateformat = require(\"dateformat\");\ndateformat.masks.secondTime = \"yymmddHHMMss\";\ndateformat.masks.myTime = \"mmm dd h:MM TT\";\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tweets: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ searchTerm: this.props.searchterm, by: this.props.by });\n\n    if (!this.state.tweets[0] && this.props.by == \"top\") {\n      let string = \"http://localhost:4005/top/\" + this.props.searchterm;\n      fetch(string)\n        .then(r => r.json())\n        .then(body => {\n          let arr0 = [];\n          body.map(r => {\n            r[\"secondTime\"] = dateformat(r.timestamp, \"secondTime\");\n            arr0.push(r);\n          });\n          arr0.sort(sortTimes);\n          this.setState({ tweets: arr0, loading: false });\n        });\n    } else if (!this.state.tweets[0] && this.props.by == \"latest\") {\n      let string = \"http://localhost:4005/latest/\" + this.props.searchterm;\n      fetch(string)\n        .then(r => r.json())\n        .then(body => {\n          let arr0 = [];\n          body.map(r => {\n            r[\"secondTime\"] = dateformat(r.timestamp, \"secondTime\");\n            arr0.push(r);\n          });\n          arr0.sort(sortTimes);\n          this.setState({ tweets: arr0, loading: false });\n        });\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.state.by !== nextProps.by) {\n      let string =\n        \"http://localhost:4005/\" + nextProps.by + \"/\" + this.state.searchTerm;\n      console.log(string);\n      let arr0 = [];\n      fetch(string)\n        .then(r => r.json())\n        .then(body => {\n          body.map(r => {\n            r[\"secondTime\"] = dateformat(r.timestamp, \"secondTime\");\n            arr0.push(r);\n          });\n          arr0.sort(sortTimes);\n          console.log(arr0);\n          this.setState({ tweets: arr0, by: nextProps.by, loading: false });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.loading == true ? (\n          <div className=\"container\">\n            <div className=\"loader\">\n              <div className=\"circle\">&nbsp;</div>\n              <div className=\"circle\">&nbsp;</div>\n              <div className=\"circle\">&nbsp;</div>\n              <div className=\"circle\">&nbsp;</div>\n            </div>\n          </div>\n        ) : (\n          <table>\n            <tr>\n              <th>Timestamp</th>\n              <th>Tweet</th>\n              <th>Retweet Count</th>\n              <th>Screen Name</th>\n            </tr>\n\n            {this.state.tweets[0]\n              ? this.state.tweets.map((r, i) => (\n                  <TableCells\n                    key={i}\n                    id={i}\n                    text={r.text}\n                    tweetId={r.tweetId}\n                    timestamp={dateformat(r.timestamp, \"myTime\")}\n                    polarity={r.polarity}\n                    searchTerm={r.searchTerm}\n                    isReplyTo={r.isReplyTo}\n                    isRetweet={r.isRetweet}\n                    screenName={r.screenName}\n                    retweetCount={r.retweetCount}\n                    favoriteCount={r.favoriteCount}\n                    replyCount={r.replyCount}\n                  />\n                ))\n              : null}\n\n            <style jsx>{`\n              .table-header {\n                padding: 20px;\n              }\n              .table-header-cells {\n                border: 1px solid rgba(157, 181, 178, 0.5);\n                padding: 0.2em 1em 0.2em 1em;\n\n                text-align: center;\n              }\n            `}</style>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AATA;AAAA;AAAA;AAAA;AA2CA;;;;AArHA;AACA;;;;;A","sourceRoot":""}